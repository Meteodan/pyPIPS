[build-system]
requires = [
    "scikit-build-core",
    "numpy>=1.21.0",
]
build-backend = "scikit_build_core.build"

[project]
name = "pyPIPS"
version = "0.1.0"
description = "A collection of python modules and scripts to analyze data from the Purdue/OU Portable In situ Precipitation Stations"
readme = "README.rst"
license = {text = "BSD-3-Clause"}
authors = [
    {name = "Dan Dawson", email = "meteodan@gmail.com"},
]
maintainers = [
    {name = "Dan Dawson", email = "meteodan@gmail.com"},
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: Visualization",
]
requires-python = ">=3.8"
dependencies = [
    # Only specify absolutely required packages to avoid conda conflicts
    "numpy>=1.21.0",  # Required for f2py compilation
]

[project.optional-dependencies]
# Scientific computing stack - use this when NOT in a conda environment
scientific = [
    "scipy",
    "matplotlib",
    "pandas",
    "xarray",
    "netCDF4",
    "cartopy",
    "metpy",
    "pytz",
    "h5py",
    "h5netcdf",
    "cftime",
    "bottleneck",
    "numba",
    "joblib",
    "beautifulsoup4",
    "lxml",
    "urllib3",
]
radar = [
    "arm_pyart",
    "pysteps",
]
dev = [
    "autopep8",
    "flake8",
    "pylint",
    "pytest",
    "pytest-cov",
    "ipython",
    "ipykernel",
    "ipywidgets",
    "jupyter",
    "nbconvert",
    "nbformat",
    "nbdime",
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "numpydoc",
]
complete = [
    "cmocean",
    "dask",
]

[project.urls]
Homepage = "https://github.com/Meteodan/pyPIPS"
Repository = "https://github.com/Meteodan/pyPIPS"
Issues = "https://github.com/Meteodan/pyPIPS/issues"

# Configure setuptools (though we're using scikit-build-core)
[tool.setuptools]
packages = ["pyPIPS"]
include-package-data = true

[tool.setuptools.package-data]
pyPIPS = ["data/**/*"]

# Development tools configuration
[tool.pytest.ini_options]
testpaths = ["pyPIPS/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "versioneer.py",
    "pyPIPS/_version.py",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | versioneer\.py
  | pyPIPS/_version\.py
)/
'''

[tool.scikit-build]
# Specify minimum cmake version for Fortran support
cmake.version = ">=3.17.2"
# Enable verbose output for debugging
cmake.args = ["-DCMAKE_BUILD_TYPE=Release"]
# Ensure NumPy is available for f2py
build.requires = ["numpy"]
# Configure wheel to include package files
wheel.packages = ["pyPIPS"]